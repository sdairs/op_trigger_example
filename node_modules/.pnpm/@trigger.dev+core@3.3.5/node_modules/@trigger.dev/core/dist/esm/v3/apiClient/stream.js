import { ApiError } from "./errors.js";
export async function zodShapeStream(schema, url, callback, options) {
    const { ShapeStream, Shape, FetchError } = await import("@electric-sql/client");
    const stream = new ShapeStream({
        url,
        headers: {
            ...options?.headers,
            "x-trigger-electric-version": "0.8.1",
        },
        fetchClient: options?.fetchClient,
        signal: options?.signal,
    });
    try {
        const shape = new Shape(stream);
        const initialRows = await shape.rows;
        for (const shapeRow of initialRows) {
            await callback(schema.parse(shapeRow));
        }
        return shape.subscribe(async (newShape) => {
            for (const shapeRow of newShape.rows) {
                await callback(schema.parse(shapeRow));
            }
        });
    }
    catch (error) {
        if (error instanceof FetchError) {
            throw ApiError.generate(error.status, error.json, error.message, error.headers);
        }
        else {
            throw error;
        }
    }
}
export function createAsyncIterableStream(source, transformer) {
    const transformedStream = source.pipeThrough(new TransformStream(transformer));
    transformedStream[Symbol.asyncIterator] = () => {
        const reader = transformedStream.getReader();
        return {
            async next() {
                const { done, value } = await reader.read();
                return done ? { done: true, value: undefined } : { done: false, value };
            },
        };
    };
    return transformedStream;
}
//# sourceMappingURL=stream.js.map