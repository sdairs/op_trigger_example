import { DeserializedJson } from "../../schemas/json.js";
import { ApiRequestOptions } from "../zodfetch.js";
import { RunMetadataManager } from "./types.js";
import { ApiClient } from "../apiClient/index.js";
export declare class StandardMetadataManager implements RunMetadataManager {
    private apiClient;
    private streamsBaseUrl;
    private flushTimeoutId;
    private hasChanges;
    private store;
    private activeStreams;
    runId: string | undefined;
    constructor(apiClient: ApiClient, streamsBaseUrl: string);
    enterWithMetadata(metadata: Record<string, DeserializedJson>): void;
    current(): Record<string, DeserializedJson> | undefined;
    getKey(key: string): DeserializedJson | undefined;
    setKey(key: string, value: DeserializedJson): void;
    deleteKey(key: string): void;
    appendKey(key: string, value: DeserializedJson): void;
    removeFromKey(key: string, value: DeserializedJson): void;
    incrementKey(key: string, increment?: number): void;
    decrementKey(key: string, decrement?: number): void;
    update(metadata: Record<string, DeserializedJson>): void;
    stream<T>(key: string, value: AsyncIterable<T> | ReadableStream<T>, signal?: AbortSignal): Promise<AsyncIterable<T>>;
    hasActiveStreams(): boolean;
    waitForAllStreams(timeout?: number): Promise<void>;
    flush(requestOptions?: ApiRequestOptions): Promise<void>;
    startPeriodicFlush(intervalMs?: number): void;
    stopPeriodicFlush(): void;
}
