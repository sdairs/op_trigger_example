import { TaskRunExceededMaxDuration } from "./types.js";
export class UsageTimeoutManager {
    usageManager;
    _abortController;
    _abortSignal;
    constructor(usageManager) {
        this.usageManager = usageManager;
        this._abortController = new AbortController();
    }
    get signal() {
        return this._abortSignal;
    }
    abortAfterTimeout(timeoutInSeconds) {
        this._abortSignal = this._abortController.signal;
        // Now we need to start an interval that will measure usage and abort the signal if the usage is too high
        const intervalId = setInterval(() => {
            const sample = this.usageManager.sample();
            if (sample) {
                if (sample.cpuTime > timeoutInSeconds * 1000) {
                    clearInterval(intervalId);
                    this._abortController.abort(new TaskRunExceededMaxDuration(timeoutInSeconds, sample.cpuTime / 1000));
                }
            }
        }, 1000);
        return this._abortSignal;
    }
}
//# sourceMappingURL=usageTimeoutManager.js.map