import { z } from "zod";
export declare const StatusUpdateStateSchema: z.ZodUnion<[z.ZodLiteral<"loading">, z.ZodLiteral<"success">, z.ZodLiteral<"failure">]>;
export type StatusUpdateState = z.infer<typeof StatusUpdateStateSchema>;
declare const StatusUpdateDataSchema: z.ZodRecord<z.ZodString, z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>;
export type StatusUpdateData = z.infer<typeof StatusUpdateDataSchema>;
export declare const StatusUpdateSchema: z.ZodObject<{
    label: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"loading">, z.ZodLiteral<"success">, z.ZodLiteral<"failure">]>>;
    data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>>;
}, "strip", z.ZodTypeAny, {
    label?: string | undefined;
    state?: "loading" | "success" | "failure" | undefined;
    data?: Record<string, import("./json.js").SerializableJson> | undefined;
}, {
    label?: string | undefined;
    state?: "loading" | "success" | "failure" | undefined;
    data?: Record<string, import("./json.js").SerializableJson> | undefined;
}>;
export type StatusUpdate = z.infer<typeof StatusUpdateSchema>;
declare const InitalStatusUpdateSchema: z.ZodObject<{
    label: z.ZodString;
    state: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"loading">, z.ZodLiteral<"success">, z.ZodLiteral<"failure">]>>;
    data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>>;
}, "strip", z.ZodTypeAny, {
    label: string;
    state?: "loading" | "success" | "failure" | undefined;
    data?: Record<string, import("./json.js").SerializableJson> | undefined;
}, {
    label: string;
    state?: "loading" | "success" | "failure" | undefined;
    data?: Record<string, import("./json.js").SerializableJson> | undefined;
}>;
export type InitialStatusUpdate = z.infer<typeof InitalStatusUpdateSchema>;
export declare const StatusHistorySchema: z.ZodArray<z.ZodObject<{
    label: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"loading">, z.ZodLiteral<"success">, z.ZodLiteral<"failure">]>>;
    data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>>;
}, "strip", z.ZodTypeAny, {
    label?: string | undefined;
    state?: "loading" | "success" | "failure" | undefined;
    data?: Record<string, import("./json.js").SerializableJson> | undefined;
}, {
    label?: string | undefined;
    state?: "loading" | "success" | "failure" | undefined;
    data?: Record<string, import("./json.js").SerializableJson> | undefined;
}>, "many">;
export type StatusHistory = z.infer<typeof StatusHistorySchema>;
export declare const JobRunStatusRecordSchema: z.ZodObject<z.objectUtil.extendShape<{
    label: z.ZodString;
    state: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"loading">, z.ZodLiteral<"success">, z.ZodLiteral<"failure">]>>;
    data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>>;
}, {
    key: z.ZodString;
    history: z.ZodArray<z.ZodObject<{
        label: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"loading">, z.ZodLiteral<"success">, z.ZodLiteral<"failure">]>>;
        data: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("./json.js").SerializableJson, z.ZodTypeDef, import("./json.js").SerializableJson>>>;
    }, "strip", z.ZodTypeAny, {
        label?: string | undefined;
        state?: "loading" | "success" | "failure" | undefined;
        data?: Record<string, import("./json.js").SerializableJson> | undefined;
    }, {
        label?: string | undefined;
        state?: "loading" | "success" | "failure" | undefined;
        data?: Record<string, import("./json.js").SerializableJson> | undefined;
    }>, "many">;
}>, "strip", z.ZodTypeAny, {
    label: string;
    key: string;
    history: {
        label?: string | undefined;
        state?: "loading" | "success" | "failure" | undefined;
        data?: Record<string, import("./json.js").SerializableJson> | undefined;
    }[];
    state?: "loading" | "success" | "failure" | undefined;
    data?: Record<string, import("./json.js").SerializableJson> | undefined;
}, {
    label: string;
    key: string;
    history: {
        label?: string | undefined;
        state?: "loading" | "success" | "failure" | undefined;
        data?: Record<string, import("./json.js").SerializableJson> | undefined;
    }[];
    state?: "loading" | "success" | "failure" | undefined;
    data?: Record<string, import("./json.js").SerializableJson> | undefined;
}>;
export type JobRunStatusRecord = z.infer<typeof JobRunStatusRecordSchema>;
export {};
