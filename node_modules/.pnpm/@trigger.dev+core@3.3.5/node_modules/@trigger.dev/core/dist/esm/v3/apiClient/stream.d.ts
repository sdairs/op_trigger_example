import { z } from "zod";
export type ZodShapeStreamOptions = {
    headers?: Record<string, string>;
    fetchClient?: typeof fetch;
    signal?: AbortSignal;
};
export declare function zodShapeStream<TShapeSchema extends z.ZodTypeAny>(schema: TShapeSchema, url: string, callback: (shape: z.output<TShapeSchema>) => void | Promise<void>, options?: ZodShapeStreamOptions): Promise<() => void>;
export type AsyncIterableStream<T> = AsyncIterable<T> & ReadableStream<T>;
export declare function createAsyncIterableStream<S, T>(source: ReadableStream<S>, transformer: Transformer<S, T>): AsyncIterableStream<T>;
