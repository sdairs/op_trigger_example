import { ApiClient } from "../apiClient/index.js";
import { getGlobal, registerGlobal, unregisterGlobal } from "../utils/globals.js";
import { getEnvVar } from "../utils/getEnv.js";
const API_NAME = "api-client";
export class ApiClientMissingError extends Error {
    constructor(message) {
        super(message);
        this.name = "ApiClientMissingError";
    }
}
export class APIClientManagerAPI {
    static _instance;
    constructor() { }
    static getInstance() {
        if (!this._instance) {
            this._instance = new APIClientManagerAPI();
        }
        return this._instance;
    }
    disable() {
        unregisterGlobal(API_NAME);
    }
    get baseURL() {
        const config = this.#getConfig();
        return config?.baseURL ?? getEnvVar("TRIGGER_API_URL") ?? "https://api.trigger.dev";
    }
    get accessToken() {
        const config = this.#getConfig();
        return (config?.secretKey ??
            config?.accessToken ??
            getEnvVar("TRIGGER_SECRET_KEY") ??
            getEnvVar("TRIGGER_ACCESS_TOKEN"));
    }
    get client() {
        if (!this.baseURL || !this.accessToken) {
            return undefined;
        }
        return new ApiClient(this.baseURL, this.accessToken);
    }
    clientOrThrow() {
        if (!this.baseURL || !this.accessToken) {
            throw new ApiClientMissingError(this.apiClientMissingError());
        }
        return new ApiClient(this.baseURL, this.accessToken);
    }
    runWithConfig(config, fn) {
        const originalConfig = this.#getConfig();
        const $config = { ...originalConfig, ...config };
        registerGlobal(API_NAME, $config, true);
        return fn().finally(() => {
            registerGlobal(API_NAME, originalConfig, true);
        });
    }
    setGlobalAPIClientConfiguration(config) {
        return registerGlobal(API_NAME, config);
    }
    #getConfig() {
        return getGlobal(API_NAME);
    }
    apiClientMissingError() {
        const hasBaseUrl = !!this.baseURL;
        const hasAccessToken = !!this.accessToken;
        if (!hasBaseUrl && !hasAccessToken) {
            return `You need to set the TRIGGER_API_URL and TRIGGER_SECRET_KEY environment variables. See https://trigger.dev/docs/management/overview#authentication`;
        }
        else if (!hasBaseUrl) {
            return `You need to set the TRIGGER_API_URL environment variable. See https://trigger.dev/docs/management/overview#authentication`;
        }
        else if (!hasAccessToken) {
            return `You need to set the TRIGGER_SECRET_KEY environment variable. See https://trigger.dev/docs/management/overview#authentication`;
        }
        return `Unknown error`;
    }
}
//# sourceMappingURL=index.js.map