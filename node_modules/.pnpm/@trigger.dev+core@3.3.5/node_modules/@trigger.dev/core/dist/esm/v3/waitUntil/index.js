import { getGlobal, registerGlobal } from "../utils/globals.js";
const API_NAME = "wait-until";
class NoopManager {
    register(promise) {
        // noop
    }
    blockUntilSettled(timeout) {
        return Promise.resolve();
    }
    requiresResolving() {
        return false;
    }
}
const NOOP_MANAGER = new NoopManager();
export class WaitUntilAPI {
    static _instance;
    constructor() { }
    static getInstance() {
        if (!this._instance) {
            this._instance = new WaitUntilAPI();
        }
        return this._instance;
    }
    setGlobalManager(manager) {
        return registerGlobal(API_NAME, manager);
    }
    #getManager() {
        return getGlobal(API_NAME) ?? NOOP_MANAGER;
    }
    register(promise) {
        return this.#getManager().register(promise);
    }
    blockUntilSettled(timeout) {
        return this.#getManager().blockUntilSettled(timeout);
    }
    requiresResolving() {
        return this.#getManager().requiresResolving();
    }
}
//# sourceMappingURL=index.js.map