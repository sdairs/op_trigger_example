"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunMetadataAPI = void 0;
const globals_js_1 = require("../utils/globals.js");
const noopManager_js_1 = require("./noopManager.js");
const API_NAME = "run-metadata";
const NOOP_MANAGER = new noopManager_js_1.NoopRunMetadataManager();
class RunMetadataAPI {
    static _instance;
    constructor() { }
    static getInstance() {
        if (!this._instance) {
            this._instance = new RunMetadataAPI();
        }
        return this._instance;
    }
    setGlobalManager(manager) {
        return (0, globals_js_1.registerGlobal)(API_NAME, manager);
    }
    #getManager() {
        return (0, globals_js_1.getGlobal)(API_NAME) ?? NOOP_MANAGER;
    }
    enterWithMetadata(metadata) {
        this.#getManager().enterWithMetadata(metadata);
    }
    current() {
        return this.#getManager().current();
    }
    getKey(key) {
        return this.#getManager().getKey(key);
    }
    setKey(key, value) {
        return this.#getManager().setKey(key, value);
    }
    deleteKey(key) {
        return this.#getManager().deleteKey(key);
    }
    incrementKey(key, value) {
        return this.#getManager().incrementKey(key, value);
    }
    decrementKey(key, value) {
        return this.#getManager().decrementKey(key, value);
    }
    appendKey(key, value) {
        this.#getManager().appendKey(key, value);
    }
    removeFromKey(key, value) {
        this.#getManager().removeFromKey(key, value);
    }
    update(metadata) {
        return this.#getManager().update(metadata);
    }
    stream(key, value, signal) {
        return this.#getManager().stream(key, value, signal);
    }
    flush(requestOptions) {
        return this.#getManager().flush(requestOptions);
    }
}
exports.RunMetadataAPI = RunMetadataAPI;
//# sourceMappingURL=index.js.map