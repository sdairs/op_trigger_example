export class StandardWaitUntilManager {
    maybeDeferredPromises = new Set();
    register(promise) {
        this.maybeDeferredPromises.add(promise);
    }
    async blockUntilSettled(timeout) {
        if (this.promisesRequringResolving.length === 0) {
            return;
        }
        const promises = this.promisesRequringResolving.map((p) => typeof p.promise === "function" ? p.promise() : p.promise);
        await Promise.race([
            Promise.allSettled(promises),
            new Promise((resolve, _) => setTimeout(() => resolve(), timeout)),
        ]);
        this.maybeDeferredPromises.clear();
    }
    requiresResolving() {
        return this.promisesRequringResolving.length > 0;
    }
    get promisesRequringResolving() {
        return Array.from(this.maybeDeferredPromises).filter((p) => p.requiresResolving());
    }
}
//# sourceMappingURL=manager.js.map